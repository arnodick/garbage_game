<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITS
image_scale[0] = 0;
image_scale[1] = 0;

alpha[0] = 0;
alpha[1] = 0;

char[0] = "Z";
char[1] = ".";

char_switch[0] = false;
char_switch[1] = false;

switch_value = 0;

alarm[0] = 60;
if (global.level_count == 4)
{
    alarm[1] = 3*room_speed;
    shake_timer = 0;
}

sound[0] = snd_snore1;
sound[1] = snd_snore2;
sound[2] = snd_snore3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHAKEY SHAKEY
shake_timer = random_range(50, 111);    //how long and strong shaking is
audio_play_sound(choose(snd_garbage1, snd_garbage2, snd_garbage3, snd_raccoon1), 1, false);
alarm[1] = (irandom_range(3, 6)) * room_speed;  //shake again in 3 - 6 secs
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Z..
char_switch[switch_value] = !char_switch[switch_value];
switch_value += 1
if (switch_value &gt; 1)
{
    switch_value = 0;
}
alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
move_towards_point(mouse_x, mouse_y, point_distance(mouse_x, mouse_y, x, y)/2); // ZZZ follows mouse

//oscillate ZZZ size and transparency
image_scale[0]  += 0.01;
image_scale[1]  = ( abs((sin(image_scale[0])))*2 ) + 1;

alpha[0]        += 0.02;
alpha[1]        = ( abs((sin(alpha[0]))) );

if (global.level_count != 3)
{
    // play random snore
    if ( !audio_is_playing(sound[0]) and !audio_is_playing(sound[1]) and !audio_is_playing(sound[2]))
    {
        audio_play_sound(sound[irandom(2)], 1, false);
    }
}
else
{
    if (!audio_is_playing(snd_bweow))
    {
        audio_play_sound(snd_bweow, 1, true);
    }
}

if (global.level_count == 4)
{
    if (shake_timer &gt; 0)
    {
        shake_timer -= 5;
        oScreen.shake = random_range(-(shake_timer/10), (shake_timer/10));
    }
}

// keep ZZZ in bounds!
if (x &lt; 0)
{
    x = 0;
}
else if (x &gt; room_width)
{
    x = room_width;
}
if (y &lt; 0)
{
    y = 0;
}
else if (y &gt; room_height)
{
    y = room_height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ZZZ
draw_text_ext_transformed_colour(x, y, "Z" + char[char_switch[0]] + char[char_switch[1]], 1, 160, image_scale[1], image_scale[1], 0, c_white, c_white, c_white, c_white, alpha[1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
