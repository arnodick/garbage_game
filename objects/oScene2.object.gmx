<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inits
randomize();

border_colour = c_yellow;
text_angle = 5; //score text's angle (rotates)
scored = false; //need this to do stuff like shake when scoring
score = 0;  // init score to 0 for this round
score_size = 4;

game_timer = 0;
game_timer_secs = 0;
game_timer_bar = 0;
shake_timer = 0;
raccoon_spawn =     choose(room_speed * 7, room_speed * 15);    // when 1st raccoon spawns
raccoon_ass_spawn = room_speed * 23;    // when racc ass CAN happen (if score &gt;= 25)
global.raccoon_count = 0;   //for raccoon coming from specific directions in level 2 + 3
global.garbage_fountain_timer = room_speed *10; // how long before garbage fountain starts in level 4
global.room_buffer = 16;    //how far from edge of screen garbages can go

if (global.plus_mode == true)
{
    instance_create(0,0,oBar);
}

// how long game lasts
if (global.level_count != 3)
{
    game_length = room_speed * 35;
}
else
{
    game_length = room_speed * 100; //on last level, last basically forever
}

// splat code
splats = $0;    //each bit represents a splat. if bit is on, that splat is drawn   
break_num = 0;  //the # of splats that have occurred
for (i = 0; i &lt; 8; i++) // init splat coords and rotations
{
    splat_coord[i] = 0; // hex values
                        // byte 1 = x
                        // byte 2 = y
                        // byte 3 = rotation
                        // byte 4 unused
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game controls

text_angle += 1;    //rotate score

//if scored, inc score, shake garbage, reset score angle, etc
if (scored == true)
{
    if (!instance_exists(oWin)) //unless level is done
    {
        score++;
        text_angle = 30;
        score_size = 8;
        with (oDoor)
        {
            oDoor.shake_timer = random_range(50, 111);
            audio_play_sound(sound[irandom(sound_amount)], 1, false);
        }
        scored = false;
    }
}

if (score_size &gt; 4)
{
    score_size -= 0.2;
}

//spawn 2 more raccoons after first level
if (game_timer == raccoon_spawn)
{
    if (global.level_count &gt; 0)
    {
    if (!instance_exists(oRaccoon))
    {
        var rac_x = 1, rac_y = 1;
        switch(global.raccoon_count)
        {
            case 1:
                rac_x = (room_width /2) + 10;
                rac_y = room_height;
                break;
            case 2:
                rac_x = room_width - 1;
                rac_y = 1;
                break;
        }
        var rac = instance_create(rac_x, rac_y, oRaccoon);
        with (rac)
        {
            direction_init = point_direction(x, y, oDoor.x, oDoor.y);;
        }
        raccoon_spawn = room_speed * 19
    }
    }
}

// check for racc ass on level 3
if(global.level_count == 2)
{
    if (score &gt;= 30)
    {
        if (game_timer == raccoon_ass_spawn)
        {
            instance_create(0, 0, oRaccoon_assault);
        }
    }
}
//start garbage fountain on last level
if(global.level_count == 3)
{
    global.garbage_fountain_timer--;
    if (global.garbage_fountain_timer &lt;= 0)
    {
        shake_timer++;
        oScreen.shake = random_range(-(shake_timer/70), (shake_timer/70));
    }
}


if (global.plus_mode == true) 
{
    if ( (global.level_count != 3) and ((game_timer_bar) &gt; (score + 2)) )
    {
        if !(instance_exists(oWin))
        {
            instance_create(room_width/2, room_height/2, oWin);
            text_angle += irandom(20);
            border_colour = c_green;
            global.score_total += score;
        }
    }
}
//end round when timer is up
else if (game_timer &gt;= game_length)
{
    if !(instance_exists(oWin))
    {
        instance_create(room_width/2, room_height/2, oWin);
        text_angle += irandom(20);
        border_colour = c_green;
        global.score_total += score;
    }
}

// inc timer if not game over
//if (game_timer &lt; game_length)
//{
    game_timer++;
    game_timer_secs = (game_timer div room_speed);
    game_timer_bar = ((game_timer)/game_length) * (game_timer/40);  //(game_timer div room_speed) + 
//}

/*
if (!instance_exists(oDebug))
{
    if (keyboard_check_pressed(vk_enter))
    {
        instance_create(0, 0, oDebug);
    }
}
if (keyboard_check_pressed(vk_space))
{
    game_length = room_speed;
}


if (keyboard_check_pressed(ord('X')))
{
    instance_create(oGarbage.x, oGarbage.y, oHam);
}
*/

instance_deactivate_region(-1, -1, room_width + 1, room_height + 1, false, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BACKGROUND + SPLATS
draw_background_stretched(background0, 0, 0, 160, 100); // just the bg

// draw the splats
for(var i = 0; i &lt; 8; i++)  //loop through 8 possible splats
{
    var bitz = $1;
    bitz = bitz &lt;&lt; i;   //also loop through the splat bit switches
    draw_background_ext(bck_splat, splat_coord[i] &amp; $000000ff, (splat_coord[i] &amp; $0000ff00) &gt;&gt; 8, 1, 1, (splat_coord[i] &amp; $00ff0000) &gt;&gt; 16, c_white, splats &amp; bitz/*draw only splats that have bit turned on*/);

}
//draw_text_colour(room_width-10, 10, string(oScene2.game_timer_bar), c_red, c_red, c_red, c_red, 1);
//draw_text_colour(room_width-10, 20, string(oScene2.game_timer_secs), c_red, c_red, c_red, c_red, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SCORE + BORDER
draw_text_ext_transformed_colour(5, 5, string(score), 10, 160, score_size, score_size, text_angle, c_white, c_white, c_white, c_white, 1);
draw_rectangle_colour(0, 0, room_width - 1, room_height - 1, border_colour, border_colour, border_colour, border_colour, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
